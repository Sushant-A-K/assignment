use evalSush;

CREATE TABLE PRODUCT_PRICE_HISTORY (
    PRODUCT_ID INT,
    EFFECTIVE_DATE DATE,
    PRICE INT
);

INSERT INTO PRODUCT_PRICE_HISTORY VALUES
(101,'2023-01-01',100),
(101,'2023-02-01',110),
(101,'2023-03-01',120),
(101,'2023-04-01',115),
(101,'2023-05-01',130),
(101,'2023-06-01',135),
(102,'2023-01-15',200),
(102,'2023-03-15',180),
(102,'2023-06-15',190),
(103,'2023-02-10',50),
(103,'2023-03-10',55),
(103,'2023-04-10',60),
(103,'2023-05-10',65),
(103,'2023-06-10',70);

WITH PRICECHANGE AS (
  SELECT
    PRODUCT_ID,
    EFFECTIVE_DATE,
    PRICE,
    LAG(PRICE) OVER (PARTITION BY PRODUCT_ID ORDER BY EFFECTIVE_DATE) AS PREVIOUS_PRICE
  FROM PRODUCT_PRICE_HISTORY
),
CHANGEINPERCENTAGE AS (
  SELECT
    PRODUCT_ID,
    EFFECTIVE_DATE,
    PRICE,
    PREVIOUS_PRICE,
    CASE
      WHEN PREVIOUS_PRICE IS NULL THEN NULL
      ELSE ROUND(((PRICE-PREVIOUS_PRICE)/PREVIOUS_PRICE)*100,2)
    END AS PERCENT_CHANGE
  FROM PRICECHANGE
)
SELECT
  PRODUCT_ID,
  COUNT(*) AS NUMBER_OF_INCREASES_IN_2023
FROM CHANGEINPERCENTAGE
WHERE
  YEAR(EFFECTIVE_DATE)=2023
  AND PRICE>PREVIOUS_PRICE
GROUP BY PRODUCT_ID
HAVING COUNT(*)>3;




WITH PRICECHANGE AS (
  SELECT
    PRODUCT_ID,
    EFFECTIVE_DATE,
    PRICE,
    LAG(PRICE) OVER (PARTITION BY PRODUCT_ID ORDER BY EFFECTIVE_DATE) AS PREVIOUS_PRICE
  FROM PRODUCT_PRICE_HISTORY
)
SELECT
  PRODUCT_ID,
  COUNT(*) AS NUMBER_OF_INCREASES_IN_2023
FROM PRICECHANGE
WHERE
  YEAR(EFFECTIVE_DATE) = 2023
  AND PRICE > PREVIOUS_PRICE
GROUP BY PRODUCT_ID
HAVING COUNT(*) > 3;
